####
# General YAML conventions:
#
#        ~                nil
#        true             Boolean.
#        false            Boolean.
#        'foo'            A string.
#        # Blah, blah.    A comment (will be ignored by the YAML parser).
####


####
# General options relating to project type and the registration of objects.  For each option, you must select only one value 
# from the options shown.
####

project_style:

  # Defines how content metadata is generated.
  content_structure: 'simple_image'  # Basic content metadata. Every file in the digital
                                     # object will appear as a <file> node in <contentMetadata
									 # with resource type="image"

                     'simple_book'   # Like simple_image, but with <contentMetadata
                                     # type="book"> and <resource type="page">.

                     'smpl'          # Content metadata is generated by converting a
                                     # pre-content metadata file supplied by SMPL.

  # Whether the pre-assembly process should register the objects.
  should_register: true   # Use if the objects are not yet registered
                   false  # Use if the objects are already registered.

  # Pre-assembly must obtain a druid for every object.
  get_druid_from: 'suri'               # Only used with should_register = true.

                  'container'          # Object is contained in a druid subdirectory
                                       # For example: "aa111bb2222".

                  'container_barcode'  # Object is contained in a barcode subdirectory.
                                       # For example: "36105115575834".

  # Whether to mint mock druids (relevant only for developers).
  use_druid_minter: false   # Use this setting for most uses.
                    true    # Mints a mock druid rather than using Suri.
                            # Overrides get_druid_from = 'suri'.


####
# Paths to the pre-assembly input and output.
####

bundle_dir:  '/foo/bar/revs'  # Input location for the project content (i.e., the 
                             # "bundle"). May contain images directly or may contain 
                             # folders, one per object, usually named by druid. 
							 # A fully qualified path.

staging_dir: '/dor/assembly' # Where to put the pre-assembled materials. This is
                             # where the assembly robots expect to find the assembled
                             # content. The value is rarely changed, expect by 
                             # developers in special circumstances.
							 # A fully qualified path.

####
# Specif how pre-assembly should locate objects within the bundle_dir.
# Here we are discovering the object containers. An object container
# is either a single file or a single directory.
####

object_discovery:

  # Option 1: use a manifest.
  use_manifest: true    # If true, set glob and regex to nil.
                false   # If false, set glob and regex paramaters to match your sub-directories

  # Option 2: two-phase directory crawl.
  #
  #   - A glob pattern is used to find the object containers within the 'bundle_dir' set above.
  #     This pattern is passed to Ruby's Dir.glob(). 
  #     See http://www.ruby-doc.org/core-1.9.3/Dir.html#method-c-glob
  #
  #   - Optionally, the results of that glob pattern can be filtered,
  #     retaining only the items matching the given regex (Ruby regular expression). 
  #     See http://www.ruby-doc.org/core-1.9.3/Regexp.html
  #
  # Both the glob and regex should be expressed in relative terms --
  # in other words, they do not include the bundle_dir.
  #
  # Various examples are shown.
  glob:  '*'                                    # Everything.
         '*.tif'                                # Only .tif files.

  regex: ~                                      # No filtering.
         '^[a-z][a-z]\d\d\d[a-z][a-z]\d\d\d\d$' # Only druid directories.
         '^\d+$'                                # Only barcode directories.
  
  
####
# Once object containers have been identified, specify which files within those
# containers should be staged (i.e., copied to the staging_dir).
####

stageable_discovery:

  # Option 1: use the object container itself.  This will simply stage the entire object directory that was matched with the glob above.
  use_container: true    # If true, set glob and regex to nil.
                 false   # If false, use glob and regex below.

  # Option 2: a two-phase container crawl.
  #
  # The glob parameter can be used to flatten or partially flatten the input
  # directory structure. For example, consider this input structure:
  #
  #   aa111bb2222/
  #     00/
  #       1.tif
  #       2.tif
  #     01/
  #       1.jp2
  #       2.jp2
  #
  # If glob = '*', both the 00 and 01 subdirectories will be staged in
  # their entirely, preserving the original structure.
  #
  # If glob = '00', only the 00 subdirectory will be staged, preserving
  # its original structure.
  #
  # If glob = '00/*', only the files within 00 will be staged, which means
  # that the 00 subdirectory will not appear in the staged materials, as
  # shown here:
  #
  #    aa/111/bb/2222/
  #      1.tif
  #      2.tif
  #
  # As above, express the glob and regex in relative terms -- in 
  # this case, relative to the container.
  #
  #  Optionally, the results of that glob pattern can be filtered,
  #     retaining only the items matching the given regex (Ruby regular expression). 
  #     See http://www.ruby-doc.org/core-1.9.3/Regexp.html
  #
  # Various examples are shown.
  glob:  '0[12]/'  # Stage the 00, 01, and 02 subdirectories.
         '00/*'    # Stage the items in the 00 subdirectory only, but not the '00' folder itself.
         '*/*'     # Stage the items residing at the second level in the structure.
         '**/*'    # Stage all leaf items. Results it total flattening. Use with caution since it may cause file name clashes.

  regex:  ~                       # No filtering.
         '(?ix) \. (tif|xml) $'  # Stage only items with .tif and .xml extentions.


####
# Additional materials accompaning the bundle.
#
# These file names below should be expressed in relative terms -- relative to bundle_dir.
####

manifest:         'manifest.csv'       # The manifest file, if 'use_manifest' is true.  Otherwise, set to ~
checksums_file:   'checksums.txt'      # A provider checksum file (in default md5sum format).  If none provided, set to ~
desc_md_template: 'mods_template.xml'  # An optional descriptive metadata XML template to use in conjunction with the manifest.


####
# Bundles using a manifest must indicate the column names
# of certain fields in the CSV file.
#
# Bundles not using a manifest should set these values to nil.
####

manifest_cols:
  object_container:   'filename'   # Required, indicates the location of the file relative to the bundle directory.
  source_id:          'sourceid'   # Required if pre-assembly is registering the objects.
  label:              'label'      # Ditto.


####
# General project information.
####

project_name:      'Foo'                   # Required.  If objects are not yet registered, this will be used as a prefix to the sourceID and will also become a project tag in DOR for each object..

progress_log_file: '/log/progress_foo.yaml' # Required. Typically based on project name.  A fully qualified path.

apo_druid_id:      'druid:aa111bb2222'     # Required if pre-assembly is registering 
                                           # the objects.  Include druid prefix.

set_druid_id:      'druid:yy888xx9999'     # If supplied, pre-assembly will associate
                                           # the object with a set in Dor. Include druid prefix.
										   # Note that if you need to attach specific objects in your bundle
										   # into different sets, you will need to run pre-assembly twice with two different YAML files.


####
# Attributes related to content metadata generation.
####

# A regex to exclude staged files from contentMetadata.xml.
content_exclusion: ~             # Include all staged files in content metadata.
                   '(?i)\.xml$'  # Exclude xml files from content metadata.

# The method used to generate content metadata.
content_md_creation:
  style:       'default'                # Used by most projects.
               'smpl'                   # Only used by SMPL projects.  Will generate a content metadata file using the SMPL preContentMetadata.
  pre_md_file: ~ 						# Name of the pre-content metadata file. Set to nil if style = 'default' (common scenario)
  			   'preContentMetadata.xml' # Currently only use by SMPL. 
  										

####
# Attributes related common-accessioning steps.
####

publish_attr:
  publish:  ~      # Most projects should set these values to nil.  If specified here, each file in the contentMetadata will get these attributes.  If not specified or nil, they will be added by the assembly robots based on mimetype.
  shelve:   ~
  preserve: ~



####
# Run options.
#
# The typical values used in production are shown.
####

resume:           false  # If true, pre-assembly will skip objects that were
                         # already successfully pre-assembled, as indicated by
                         # the information in the project's progress_log_file.
                         # Normally, this option is false in the YAML file and
                         # is set to true on the command line with the --resume
                         # option.

limit_n:          ~      # Set to an integer if you want to process only a limited
                         # number of the discovered objects.  Useful for testing.

init_assembly_wf: true   # Whether pre-assembly should initiate the assembly
                         # workflow for the object.  Should always be true except for testing purposes.
						 # If set to false, the assembly robots will not operate.

####
# Other run options, mainly relevant for developers.
#
# The typical values used in production are shown.
####

compute_checksum:   true   # Whether pre-assembly should compute checksums.

validate_usage:     true   # Whether pre-assembly should confirm that all expected
                           # YAML parameters have been supplied.

show_progress:      true   # Whether to print druids as they are pre-assembled on the command line.

uniqify_source_ids: false  # If true, pre-assembly attacheds a timestamp to source
                           # IDs. Used during integration testing to avoid duplicate source ID errors that come from DOR.

cleanup:            false  # If true, pre-assembly deletes objects from DOR after
                           # pre-assembly finishes. Relevant only during development.

