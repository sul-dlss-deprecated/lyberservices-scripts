####
# General YAML conventions:
#  You should quote any value that is not nil or boolean to ensure it is treated as a string and not an integer.
#
#        ~                nil
#        true             Boolean.
#        false            Boolean.
#        'foo'            A string.
#        # Blah, blah.    A comment (will be ignored by the YAML parser).
####

####
# General project information.
####

project_name:      'Foo'                   # Required.  If objects are not yet registered, this will be used as a prefix to the sourceID and will also become a project tag in DOR for each object.

progress_log_file: ~                        # Optional - if left as nil a progress log file will be created in the same location as your
                                            # input yaml file by appending '_progress' to your filename.  If you cannot write to that location
                                            # or want to specify a different filename, you may do so. 
                                            #  NOTE: you probably won't be able to write to the thumper drives.  Beware if that's where your config file is.
                                            # In that case, you can specify /dor/preassembly, which is a good alternative and writable.
                                            # Typically based on project name.  A fully qualified path.
                                            # Be sure to keep your progress log file somewhere useful and be aware 
                                            # if you restart pre-assembly without using the --resume switch, it will be overwritten.
                                            # You will need the progress log for cleanup and restarting.
                                            # PLEASE DO NOT PLACE THIS IN THE LOG FOLDER OF THE PRE-ASSEMBLY CODE FOLDER ON THE SERVER.  IT MAY BE DELETED IF YOU DO THIS.
                    '/dor/preassembly/progress_foo.yaml'  # this is an example of specifying an alternate location                       
                                            
apo_druid_id:      'druid:aa111bb2222'     # Required if pre-assembly is registering 
                                           # the objects.  Include druid prefix.
                                           # NOTE: only valid if should_register = true OR get_druid_from = container_barcode

set_druid_id:      'druid:yy888xx9999'     # If supplied, pre-assembly will associate
                                           # the object with a set in Dor. Include druid prefix.
                                           # NOTE: only valid if should_register = true
										   # Note that if you need to attach specific objects in your bundle
										   # into different sets, you will need to run pre-assembly twice with two different YAML files.

validate_files:    true      # if set to true, then image files will be confirmed as valid before proceeding ... validity ensures they are likely to have jp2 creation suceed, defaults to true if not provided
                   false     # if set to false, then no image validation is performed -- this can lead to tifs not having jp2s generated during assembly if they do not have valid profiles 


####
# General options relating to project type and the registration of objects.  For each option, you must select only one value 
# from the options shown.
####

project_style:

  # Defines the structure of content metadata.  Set content_md_creation[:style] below if you want to bundle files into resources.
  content_structure: 'simple_image'  # Every file in the digital object will appear as a <file> node with <contentMetadata type="image"> and <resource type="image">

                     'file'          # Like simple_image, but with <contentMetadata type="file"> and <resource type="file">.

                     'simple_book'   # Like simple_image, but with <contentMetadata type="book"> and <resource type="page">.

                     'book_with_pdf' # Like simple_book, but any resource nodes with any file other than an image (e.g. a PDF) will have <resource type="file">

                     'book_as_image' # Like simple_book, but with <contentMetadata type="book"> and <resource type="image"> instead of "page".
                                                
                     'smpl'          # Used for SMPL projects
                                                      
  # Whether the pre-assembly process should register the objects.
  should_register: true   # Use if the objects are not yet registered
                   false  # Use if the objects are already registered.

  # Pre-assembly must obtain a druid for every object.
  get_druid_from: 'suri'               # Only used with should_register = true.

                  'container'          # Object is contained in a druid subdirectory
                                       # For example: "aa111bb2222".

                  'container_barcode'  # Object is contained in a barcode subdirectory.  Druid will be fetched from a service.
                                       # For example: "36105115575834".
                                       
                  'manifest'           # Object's druid is in a column in the manifest called "druid".  Only used for should_register=false and use_manifest=true
                                       #   when you want to use a manifest for descriptive metadata, and when the folder container is not named by druid

                  'druid_minter'       # Mints a mock druid rather than using Suri.  Really only for development purposes.


####
# Paths to the pre-assembly input and output.
####

bundle_dir:  '/foo/bar/revs'  # Input location for the project content (i.e., the 
                             # "bundle"). May contain images directly or may contain 
                             # folders, one per object, usually named by druid. 
							               # A fully qualified path.

staging_dir: ~               # Where to put the pre-assembled materials. This is
                             # where the assembly robots expect to find the assembled
                             # content. The default value is /dor/assembly and will be set automatically
                             # if you leave this as nil (~)
                             # Developers and tests may use this in special circumstances.
							               # A fully qualified path.

####
# Specify how pre-assembly should locate objects within the bundle_dir.
# Here we are discovering the object containers. An object container
# is either a single file or a single directory.
####

object_discovery:

  # Option 1: use a manifest.
  use_manifest: true    # If true, set glob and regex to nil.
                false   # If false, set glob and regex paramaters to match your sub-directories

  # Option 2: two-phase directory crawl.
  #
  #   - A glob pattern is used to find the object containers within the 'bundle_dir' set above.
  #     This pattern is passed to Ruby's Dir.glob(). 
  #     See http://www.ruby-doc.org/core-1.9.3/Dir.html#method-c-glob
  #
  #   - Optionally, the results of that glob pattern can be filtered,
  #     retaining only the items matching the given regex (Ruby regular expression). 
  #     See http://www.ruby-doc.org/core-1.9.3/Regexp.html
  #
  # Both the glob and regex should be expressed in relative terms --
  # in other words, they do not include the bundle_dir.
  #
  # Various examples are shown.
  glob:  '*'                                    # Everything.
         '*.tif'                                # Only .tif files.

  regex: ~                                      # No filtering.
         '^[a-z][a-z]\d\d\d[a-z][a-z]\d\d\d\d$' # Only druid directories.
         '^\d+$'                                # Only barcode directories.
  
  
####
# Once object containers have been identified, specify which files within those
# containers should be staged (i.e., copied to the staging_dir).
####

stageable_discovery:

  # Option 1: If you set 'use_container' to true, this will simply stage the entire object directory that was matched with the glob above.
  # This is not a valid option if your object is contained in a folder named by druid or barcode - preassembly will give an error message if you set 
  # 'use_container' to true and the 'get_druid_from' parameter to 'container' or 'container_barcode'.
   
  use_container: true    # If true , set glob and regex to nil below.
                 false   # If false, use glob and regex below.

  # Option 2: If you set 'use_container' to false, staging will be done via a two-phase container crawl based on the glob and regex patterns specified below.
  #
  # The glob parameter can be used to flatten or partially flatten the input
  # directory structure. For example, consider this input structure:
  #
  #   aa111bb2222/
  #     00/
  #       1.tif
  #       2.tif
  #     01/
  #       1.jp2
  #       2.jp2
  #
  # If glob = '*', both the 00 and 01 subdirectories will be staged in
  # their entirely, preserving the original structure.
  #
  # If glob = '00', only the 00 subdirectory will be staged, preserving
  # its original structure.
  #
  # If glob = '00/*', only the files within 00 will be staged, which means
  # that the 00 subdirectory will not appear in the staged materials, as
  # shown here:
  #
  #    aa/111/bb/2222/
  #      1.tif
  #      2.tif
  #
  # As above, express the glob and regex in relative terms -- in 
  # this case, relative to the container.
  #
  #  Optionally, the results of that glob pattern can be filtered,
  #     retaining only the items matching the given regex (Ruby regular expression). 
  #     See http://www.ruby-doc.org/core-1.9.3/Regexp.html
  #
  # Various examples are shown.
  glob:  '0[12]/'  # Stage the 00, 01, and 02 subdirectories.
         '00/*'    # Stage the items in the 00 subdirectory only, but not the '00' folder itself.
         '*/*'     # Stage the items residing at the second level in the structure.
         '**/*'    # Stage all leaf items. Results it total flattening. Use with caution since it may cause file name clashes.  Note-this will also stage all folders
                   #   as well, unless you further restrict to specific files only using the regex below.
         '*'       # Stage all items at the root level of the container (useful for a container that has no structure, just a list of files) 
         
  regex:  ~                       # No filtering.
         '(?ix) \. (tif|xml) $'  # Stage only items with .tif and .xml extentions.

####
# Restrict objects to be accessioned when using the discovery method
####							               
accession_items:   ~         # Only valid for projects that do *not* use a manifest. 
                            # Used if you need to accession or re-accession only specific objects.
                            # You can supply a list of container names, and indicate if this list is exlcusionary
                            # or inclusionary.  In other words, do you want to *only* accession the named items, or accession
                            # everything *except* those listed? You can also specify if this is a re-accession, in which case the
                            # items will be reset (but not unregistered from DOR) before accessioning again.
                            # If you specify ~, all items will be accessioned and you can leave off the "only" and "except" parameters.
                            # Note that you will probably also want to log this new run using a different progress log file.  
                            # In the "only" and "except" list, you should use names that exactly match the folder names in your bundle_dir,
                            # one per line, indented under "only" or "except" and preceeded by a dash as shown in the examples below.
                            # If 'should_register: true', and you want to run a re-accession, then you should create a new manifest file (see the README)
                            # For a normal run (or if 'should_register: true'), set "accession_items" to ~, which will process all items.  
                            # Note that you can run a full re-accession for all items by simply leaving off the "only" and "except" lists, but
                            # still specifying a "reaccession: true".  Do not specify both "only" and "except" unless you like flying experimental homebuilt aircraft.
                            # Examples below:
  only:
    - 'aa111aa1111'
    - 'bb222bb2222'              # this is an example of two objects that will be accessioned, put them one per line, prefixed by a space, a dash, and space, add quotes around each item
  except:
    - 'aa111aa1111'
    - 'bb222bb2222'             # this is an example of two objects that will be ignored, put them one per line, prefixed by a space, a dash, and space, add quotes around each item
  reaccession: true            # if running a re-accession, set this to true so that a cleanup will be performed, if this is a first accession attemp for these objects, set it to false or ~ or leave it off                       


####
# Additional materials accompaning the bundle.
#
# These file names below should be expressed in relative terms -- relative to bundle_dir.
####

manifest:         'manifest.csv'       # The manifest file, if 'use_manifest' is true.  Otherwise, set to ~
checksums_file:   'checksums.txt'      # A provider checksum file (in default md5sum format).  If none provided, set to ~
desc_md_template: 'mods_template.xml'  # An optional descriptive metadata XML template to use in conjunction with the manifest.


####
# If object_discovery:use_manifest=true, you must indicate the column names of certain fields in the CSV file.
# 
# For object_discovery:use_manifest=false, set these values to nil.
####

manifest_cols:
  object_container:   'filename'   # Always required, indicates the column name containing the filename (single file per object) or folder name (multiple files per object) relative to the bundle directory.
  source_id:          'sourceid'   # Required if project_style:should_register = true
  label:              'label'      # Required if project_style:should_register = true


####
# Attributes related to content metadata generation.
####

# A regex to exclude staged files from contentMetadata.xml.
content_exclusion: ~             # Include all staged files in content metadata.
                   '(?i)\.xml$'  # Exclude xml files from content metadata.

# The method used to bundle resources together when generating content metadata.
content_md_creation:
  style:       'default'                # Used by most projects, creates one resource per file.
               'filename'                 # Collects files together into a single resource based on filename -- files with the same name but different extensions will become
                                          # part of a single resource node.
               'dpg'                 # Collects files together into a single resource based on DPG filenaming convention (ignoring _00_,_05_, etc.) -- files with the same name but different extensions will become
                                         # part of a single resource node.                                          
               'smpl'                   # Only used by SMPL projects.  Will generate a content metadata file using the SMPL preContentMetadata.
  pre_md_file: ~ 						# Name of the pre-content metadata file. Set to nil if style = 'default' (common scenario)
  			   'preContentMetadata.xml' # Currently only use by SMPL. 
  										

####
# Attributes related common-accessioning steps.
####

publish_attr:  ~  # Most projects should set this to nil.  If not specified or nil, they will be added by the assembly robots based on mimetype.

  # If you want to specify them here, you can do it in two ways.  First off, don't set 'publish_attr' to nil.  Next
  # set it globally for all files, like this:
  shelve:   'no'    
  publish:  'no'      
  preserve: 'yes'
  
  # The second is by mime-type, nesting under each mimetype (which must be quoted), like this.  The attributes will be set according to the
  #  mime-type of the file.  You must also set a 'default', which will be applied if no mime-type matches.  If any of the default attributes are
  # set to nil and no mime-type matches, the attributes will be left off and added during assembly according to the defaults.  
  'image/jp2':
    publish:            'yes'
    shelve:             'yes'
    preserve:           'no'
  'image/tiff':
    publish:            'no'
    shelve:             'no'
    preserve:           'yes'
  'default':
    publish:             'no'
    shelve:              'no'
    preserve:            'yes'

####
# Run options.
#
# The typical values used in production are shown.
####

resume:           false  # If true, pre-assembly will skip objects that were
                         # already successfully pre-assembled, as indicated by
                         # the information in the project's progress_log_file.
                         # Normally, this option is false in the YAML file and
                         # is set to true on the command line with the --resume
                         # option.

limit_n:          ~      # Set to an integer if you want to process only a limited
                         # number of the discovered objects.  Useful for testing.

init_assembly_wf: true   # Whether pre-assembly should initiate the assembly
                         # workflow for the object.  Should always be true except for testing purposes.
						 # If set to false, the assembly robots will not operate.

####
# Other run options, mainly relevant for developers.
#
# The typical values used in production are shown.
####

new_druid_tree_format:  false # Determines druid tree directory format (defaults to "false").
                              # Check with Lyberteam to determine appropriate style to use.  As of August 20, 2012, only old style is supported in production.
                              # old style: /oo/000/oo/0001
                              # new style  /oo/000/oo/0001/oo000oo0001/content and /oo/000/oo/0001/oo000oo0001/metadata

compute_checksum:       true   # Whether pre-assembly should compute checksums.

validate_usage:         true   # Whether pre-assembly should confirm that all expected
                           # YAML parameters have been supplied.

show_progress:          true   # Whether to print druids as they are pre-assembled on the command line.

uniqify_source_ids:     false  # If true, pre-assembly attacheds a timestamp to source
                           # IDs. Used during integration testing to avoid duplicate source ID errors that come from DOR.

cleanup:                 false  # If true, pre-assembly deletes objects from DOR after
                           # pre-assembly finishes. Relevant only during development.

