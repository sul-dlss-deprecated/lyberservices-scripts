#! /usr/bin/env ruby

# This action is used to remediate objects in some way that you define.
# You supply a list of druids to remediate in a CSV file and a Ruby file defining a method that operates on the objects.
# The code handles all logging and versioning as needed.

# Run with
# ROBOT_ENVIRONMENT=production bin/remediate CSV_FILE_WITH_DRUIDS.csv REMEDIATE_LOGIC_FILENAME.rb

# CSV_FILE_WITH_DRUIDS has the format of one column with a list of druids -- no other columns should be present. An example is below.
# This file should be in a location where the script has read/write access to it.
#druid:oo000oo0001
#druid:oo000oo0002

# REMEDIATE_LOGIC_FILENAME is a reference to a Ruby code file that defines what you want the remediation to do.  An example of this 
# file is in lib/remediation/remediate_project_example.rb  Copy that file, and edit it somewhere the script can read it and then pass 
# the filename to the script.

# The result will be some screen output, a detailed .YML file in the same location and with the same name as the input CSV file.
# The input CSV file will be updated with two additional columns - a status indicating if remediation succeeded and a message.
# You can re-run remediation with the same CSV file and it will automatically skip already completed objects.

# Note that unless your laptop has access to the Fedora instance you need to remediate (usually Production), 
# you should probably run this from lyberservices-prod to have access to all mounts and configuration.

require File.expand_path(File.dirname(__FILE__) + '/../config/boot')
require 'rubygems'
require 'csv'
require 'pre_assembly/remediation/remediate'

def help(error_msg)
  abort "#{error_msg}\n\nUsage:\n  ROBOT_ENVIRONMENT=XXXXX remediate CSV_FILE_WITH_DRUIDS REMEDIATE_LOGIC_FILENAME\n"
end

help "Incorrect N of arguments." if ARGV.size < 2
csv_in = ARGV[0]
remediate_logic_file = ARGV[1]

help "CSV file not found." unless File.file?(csv_in)
help "REMEDIATE_LOGIC_FILE file not found." unless File.file?(remediate_logic_file)

require remediate_logic_file

source_path=File.dirname(csv_in)
source_name=File.basename(csv_in,File.extname(csv_in))
progress_log_file=File.join(source_path,source_name + '_log.yml')
csv_out=File.join(source_path, source_name + "_output.csv")

# read in completed druids so we don't reprocess them
completed_druids=PreAssembly::Remediation::Item.get_druids(progress_log_file)

# read input CSV
csv_file_in = CSV::Reader.parse(File.open(csv_in))
csv_file_in.each_with_index  do |row, x|
  pid=row[0].to_s.strip
  done=completed_druids.include?(pid)
  if done 
    puts "#{pid} : skipping, already completed"
  else
    item=PreAssembly::Remediation::Item.new(pid)
    item.description=File.basename(remediate_logic_file) # added to the version description
    item.extend(RemediationLogic) # add in our project specific methods
    success=item.remediate
    item.log_to_progress_file(progress_log_file)
    item.log_to_csv(csv_out)
    puts "#{pid} : #{success}"    
  end
end
csv_file_in.close
